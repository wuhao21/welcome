{"version":3,"sources":["Avatar.js","utils.js","LeftNav.js","RightView.js","App.js","serviceWorker.js","index.js"],"names":["imageStyle","display","marginLeft","marginRight","iconRowStyle","marginTop","marginBottom","gridColumns","width","iconStyle","color","fontSize","textStyle","fontsize","textAlign","icons","github","linkedin","youtube","instagram","Avatar","Container","fluid","Row","Col","Figure","Image","src","style","roundedCircle","Caption","Array","from","Object","entries","entry","type","theme","onClick","link","window","open","navBarStyle","flexDirection","minHeight","LeftNav","props","Navbar","bg","variant","Nav","Item","Link","onSelect","onViewChange","eventKey","RightView","currentView","Card","Img","Body","Title","Text","Button","ListGroup","navColStyle","paddingLeft","App","useState","sm","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da29782a.chunk.js","sourcesContent":["import React from 'react';\nimport Figure from 'react-bootstrap/Figure';\nimport { Icon } from 'antd';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { onClickOpenLinkInNewTab } from './utils';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst imageStyle = {\n    display: 'block',\n    marginLeft: 'auto',\n    marginRight: 'auto'\n};\n\nconst iconRowStyle = {\n    marginTop: '10px',\n    marginBottom: '10px',\n    gridColumns: '4',\n    width: '100%'\n};\n\nconst iconStyle = {\n    color: 'white',\n    fontSize: 20,\n    display: 'block',\n    marginRight: 'auto'\n};\n\nconst textStyle = {\n    color: 'gray',\n    fontsize: 10,\n    textAlign: 'center'\n};\n\nconst icons = {\n    github: 'https://github.com/ValerieWang628',\n    linkedin: 'https://www.linkedin.com/in/valerieyunziwang628/',\n    youtube: 'https://www.youtube.com/',\n    instagram: 'https://www.instagram.com/'\n};\n\nfunction Avatar() {\n    return (\n        <Container fluid>\n            <Row>\n                <Col>\n                    <Figure>\n                        <Figure.Image\n                            src=\"https://avatars1.githubusercontent.com/u/34406500?s=150&v=4\"\n                            style={imageStyle}\n                            roundedCircle\n                        />\n                        <Figure.Caption style={textStyle}>\n                            Lorem ipsum dolor sit amet, consectetur adipiscing\n                            elit.\n                        </Figure.Caption>\n                    </Figure>\n                </Col>\n            </Row>\n            <Row style={iconRowStyle}>\n                {Array.from(Object.entries(icons), entry => (\n                    <Col>\n                        <Icon\n                            type={entry[0]}\n                            theme=\"outlined\"\n                            style={iconStyle}\n                            onClick={onClickOpenLinkInNewTab(entry[1])}\n                        />\n                    </Col>\n                ))}\n            </Row>\n        </Container>\n    );\n}\n\nexport default Avatar;\n","function onClickOpenLinkInNewTab(link) {\n    return () => window.open(link);\n}\n\nexport { onClickOpenLinkInNewTab };\n","import React from 'react';\nimport { Nav, Navbar, Container } from 'react-bootstrap';\nimport Avatar from './Avatar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst navBarStyle = {\n    flexDirection: 'column',\n    width: '100%',\n    minHeight: '1000px',\n    textAlign: 'center'\n};\n\nfunction LeftNav(props) {\n    function onSwitchToAboutView() {\n        props.onViewChange('about');\n    }\n    function onSwitchToGameProjectsView() {\n        props.onViewChange('projects');\n    }\n    function onSwitchToModelingView() {\n        props.onViewChange('modeling');\n    }\n    function onSwitchToArtView() {\n        props.onViewChange('art');\n    }\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" style={navBarStyle}>\n            <Nav style={navBarStyle}>\n                <Nav.Item>\n                    <Avatar />\n                </Nav.Item>\n                <Nav.Link onSelect={props.onViewChange} eventKey=\"about\">\n                    About\n                </Nav.Link>\n                <Nav.Link onSelect={props.onViewChange} eventKey=\"projects\">\n                    Game Projects\n                </Nav.Link>\n                <Nav.Link onSelect={props.onViewChange} eventKey=\"modeling\">\n                    3D Modeling\n                </Nav.Link>\n                <Nav.Link onSelect={props.onViewChange} eventKey=\"art\">\n                    Homemade Art\n                </Nav.Link>\n            </Nav>\n        </Navbar>\n    );\n}\n\nexport default LeftNav;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nfunction RightView(props) {\n    switch (props.currentView) {\n        case 'about':\n            return (\n                <Card style={{ width: '18rem' }}>\n                    <Card.Img\n                        variant=\"top\"\n                        src=\"https://cdn.gamer-network.net/2019/articles/2019-11-27-15-36/pokemon-sword-and-shield-unveils-gigantamax-snorlax-1574869007864.jpg/EG11/thumbnail/1920x1078/format/jpg/quality/80\"\n                    />\n                    <Card.Body>\n                        <Card.Title>home</Card.Title>\n                        <Card.Text>\n                            Some quick example text to build on the card title\n                            and make up the bulk of the card's content.\n                        </Card.Text>\n                        <Button variant=\"primary\">Go somewhere</Button>\n                    </Card.Body>\n                </Card>\n            );\n        case 'projects':\n            return (\n                <ListGroup>\n                    <ListGroup.Item>Cras justo odio</ListGroup.Item>\n                    <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n                    <ListGroup.Item>Morbi leo risus</ListGroup.Item>\n                    <ListGroup.Item>Porta ac consectetur ac</ListGroup.Item>\n                    <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\n                </ListGroup>\n            );\n        default:\n            return null;\n    }\n}\n\nexport default RightView;\n","import React, { useState } from 'react';\nimport LeftNav from './LeftNav';\nimport RightView from './RightView';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst navColStyle = {\n    paddingLeft: '0px'\n};\n\nfunction App() {\n    const [currentView, onViewChange] = useState('about');\n    return (\n        <Container fluid>\n            <Row>\n                <Col sm={2} style={navColStyle}>\n                    <LeftNav onViewChange={onViewChange} />\n                </Col>\n                <Col sm={10}>\n                    <RightView currentView={currentView} />\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}